type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {
        private static final int PORT = 23456;
        public static void main(String[] args) throws InterruptedException {
            System.out.println("Server started!");
            new PortListening(PORT).start();
        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.net.ConnectException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;

    import static org.hyperskill.hstest.common.Utils.sleep;

    public class FileServerTest extends StageTest<String> {

        private static final String onConnectExceptionMessage = "A client can't connect to the server!\n" +
            "Make sure the server handles connections and doesn't stop after one client connected.";

        public static final String serverDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;

        public static final String clientDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "client" + File.separator + "data" + File.separator;

        private static String id;

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkServerStop),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkPaths),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testSaveAndGet),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testGetAfterServerRestart),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testDeleteFiles)
            );
        }

        // Test #1. Check if server stops
        CheckResult checkServerStop() {

            TestedProgram server = getServer();
            TestedProgram client;

            server.startInBackground();

            client = getClient();
            client.start();
            client.execute("exit");

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                return CheckResult.wrong("You should stop the server if a client sends 'exit'");
            }

            return CheckResult.correct();
        }

        CheckResult checkPaths() {
            // Test #2. Check folders with data
            if (!Files.exists(Paths.get(serverDataPath)) || !Files.isDirectory(Paths.get(serverDataPath))) {
                return CheckResult.wrong("Can't find '/server/data' folder. You should store all saved files in it!\n" +
                    "The folder should be created even if the server wasn't started!");
            }

            if (!Files.exists(Paths.get(clientDataPath)) || !Files.isDirectory(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find '/client/data' folder. You should store all files you want to " +
                    "store on the server in it!\n" +
                    "The folder should be created even if the client wasn't started!");
            }
            return CheckResult.correct();
        }


        CheckResult testSaveAndGet() {

            TestedProgram server;
            TestedProgram client;

            Utils.createFiles(clientDataPath);

            // Test #3. Check saving file on the server
            server = getServer();
            server.startInBackground();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeAdding = Utils.numExistingFiles(folder);

            client = getClient();
            client.start();
            client.execute("2\ntest_purpose_test1.txt");
            String clientOutput = client.execute("");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            id = Utils.findId(clientOutput);

            int numOfFilesAfterAdding = Utils.numExistingFiles(folder);

            if (numOfFilesAfterAdding == numOfFilesBeforeAdding) {
                return CheckResult.wrong("Once a client saved a file on the server number of files in /server/data/ should be changed!");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("2\ntest_purpose_test2.txt\ntest_purpose_newFile.txt");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            if (!Utils.isServerFileExists("test_purpose_newFile.txt")) {
                return CheckResult.wrong("Can't find a file after saving on the server." +
                    "You should save client's files in /server/data/ folder!");
            }

            String savedFileContent = Utils.getServerFileContent("test_purpose_newFile.txt");

            if (!savedFileContent.equals("test2")) {
                return CheckResult.wrong("A file after saving has wrong content!");
            }

            // Test #4. Check getting files
            client = getClient();
            client.start();
            clientOutput = client.execute("1\n1\ntest_purpose_notExist.txt");

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by name that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("1\n2\n" + (id + "511"));

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by ID that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get.txt");

            if (!Utils.isClientFileExists("test_purpose_get.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByNameFileContent = Utils.getClientFileContent("test_purpose_get.txt");
            if (!downloadedByNameFileContent.equals("test2")) {
                return CheckResult.wrong("After getting a file from the server by name it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_id.txt");

            if (!Utils.isClientFileExists("test_purpose_get_id.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByIdFileContent = Utils.getClientFileContent("test_purpose_get_id.txt");
            if (!downloadedByIdFileContent.equals("test1")) {
                return CheckResult.wrong("After getting a file from the server by ID it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testGetAfterServerRestart() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            server.startInBackground();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_by_id_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_by_id_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testDeleteFiles() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeDeleting = Utils.numExistingFiles(folder);

            server.startInBackground();
            client.start();
            client.execute("3\n1\ntest_purpose_newFile.txt");

            sleep(2000);
            int numOfFilesAfterDeletingByName = Utils.numExistingFiles(folder);
            if (numOfFilesBeforeDeleting == numOfFilesAfterDeletingByName) {
                return CheckResult.wrong("Once a client deleted a file by name from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("3\n2\n" + id);

            sleep(2000);
            int numOfFilesAfterDeletingById = Utils.numExistingFiles(folder);
            if (numOfFilesAfterDeletingByName == numOfFilesAfterDeletingById) {
                return CheckResult.wrong("Once a client deleted a file by ID from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTestDeleteFiles() {
            Utils.deleteTestFiles();
        }

        public static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        public static TestedProgram getServer() {
            return new TestedProgram("server");
        }
    }


  learner_created: false
- name: src/client/Main.java
  visible: true
  text: |+
    package client;

    import java.io.*;
    import java.net.Socket;

    public class Main {
        private static final String SERVER_ADDRESS = "127.0.0.1";
        private static final int SERVER_PORT = 23456;

        public static void main(String[] args) throws IOException {
            System.out.println("Client started!");
            try (
                    Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
                    DataInputStream inputStream = new DataInputStream(socket.getInputStream());
                    DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream());
            ) {
                Activity.routine(inputStream, outputStream);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

  learner_created: false
- name: src/server/Session.java
  visible: true
  text: |
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;

    public class Session extends Thread {
        private Socket socket;

        Session(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            String response;
            try (
                    DataInputStream inputStream = new DataInputStream(socket.getInputStream());
                    DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream());
            ){
                System.out.println("into run");
                while (true) {
                    System.out.println("start to wait info from client");
                    String message = inputStream.readUTF();
                    System.out.println("Received: " + message);
                    String []parsedMessage = message.stripLeading().split("\\s", 3);
                    switch (parsedMessage[0]) {
                        case "PUT":
                            response = QueryProcessing.PutProcess(parsedMessage);
                            outputStream.writeUTF(response);
                            break;
                        case "GET":
                            response = QueryProcessing.GetProcess(parsedMessage);
                            outputStream.writeUTF(response);
                            break;
                        case "DELETE":
                            response = QueryProcessing.DeleteProcess(parsedMessage);
                            outputStream.writeUTF(response);
                            break;
                        case "exit":
                            outputStream.write(200);
                            socket.close();
                            System.exit(0);
                    }
                    System.out.println("Sent: " + "All files were sent!");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: false
- name: src/client/CommandProcessing.java
  visible: true
  text: |
    package client;

    import java.io.*;

    public class CommandProcessing  {

        public static final String getFileNamePrompt = "Enter filename: ";
        public static final String getFileContentPrompt = "Enter file content: ";

        public void createAFile(DataInputStream inputStream, DataOutputStream outputStream, BufferedReader reader) throws IOException {

            String request = "PUT ";

            System.out.print(getFileNamePrompt);
            request =   request.concat(reader.readLine()).concat(" ");
            System.out.print(getFileContentPrompt);
            request = request.concat(reader.readLine());

            outputStream.writeUTF(request);
            System.out.println("The request was sent.");

            String responseCode = inputStream.readUTF();
            System.out.println(responseCode);

            switch (responseCode) {
                case "200" :
                    System.out.println("The response says that file was created!");
                    break;
                case "403" :
                    System.out.println("The response says that creating the file was forbidden!");
                    break;
                case "500" :
                    System.out.println("The response says that there is an unexpected error!");
                    break;
            }
        }

        public void stopServer(DataInputStream inputStream, DataOutputStream outputStream) throws IOException {
            outputStream.writeUTF("exit");
            System.out.println("The request was sent.");

            if (inputStream.read() == 200) {
                System.out.println("the response says that the server has been stopped");
            }
        }

        public void getAFile(DataInputStream inputStream, DataOutputStream outputStream, BufferedReader reader) throws IOException {
            String request = "GET ";

            System.out.print(getFileNamePrompt);
            request = request.concat(reader.readLine());

            outputStream.writeUTF(request);
            System.out.println("The request was sent.");

            String response = inputStream.readUTF();
            String []parsedResponse = response.split("\\s", 2);

            switch (parsedResponse[0]) {
                case "200" :
                    System.out.println("The content of the file is: " + parsedResponse[1]);
                    break;
                case "403" :
                    System.out.println("The response says that the file was not found!");
                    break;
                case "500" :
                    System.out.println("The response says that there is an unexpected error!");
                    break;
            }
        }

        public void deleteAFile(DataInputStream inputStream, DataOutputStream outputStream, BufferedReader reader) throws IOException {
            String request = "DELETE ";

            System.out.print(getFileNamePrompt);
            request = request.concat(reader.readLine());

            outputStream.writeUTF(request);
            System.out.println("The request was sent.");

            String response = inputStream.readUTF();

            switch (response) {
                case "200" :
                    System.out.println("The response says that the file was successfully deleted!");
                    break;
                case "404" :
                    System.out.println("The response says that the file was not found!");
                    break;
                case "500" :
                    System.out.println("The response says that there is an unexpected error!");
                    break;
            }
        }

    }
  learner_created: false
- name: src/client/Activity.java
  visible: true
  text: |
    package client;

    import java.io.*;

    public class Activity {
        public static final String generalPrompt = "Enter action (1 - get a file, 2 - create a file, 3 - delete a file): ";
        public static void routine(DataInputStream inputStream, DataOutputStream outputStream) throws IOException {
            try (
                    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            ) {
                CommandProcessing commandProcessing = new CommandProcessing();
                while (true) {
                    System.out.print(generalPrompt);
                    switch (reader.readLine()) {
                        case "1" :
                            commandProcessing.getAFile(inputStream, outputStream, reader);
                            break;
                        case "2" :
                            commandProcessing.createAFile(inputStream, outputStream, reader);
                            break;
                        case "3" :
                            commandProcessing.deleteAFile(inputStream, outputStream, reader);
                            break;
                        case "exit" :
                            commandProcessing.stopServer(inputStream, outputStream);
                            System.exit(0);
                            break;
                        default :
                            System.out.println("Invalid input, please try again");
                            break;
                    }
                }
            }
        }
    }
  learner_created: false
- name: src/server/QueryProcessing.java
  visible: true
  text: |
    package server;

    import java.io.*;
    import java.nio.file.DirectoryNotEmptyException;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;

    public class QueryProcessing  {
        private static final String filesPath = System.getProperty("user.dir") +
                File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;

        private static final String filesPath1 = "./File Server/task/src/server/data/";
        public static String PutProcess(String []parsedMessage) {
            try {
                String fileName = parsedMessage[1];
                File file = new File(filesPath + fileName);
                if (file.exists()) {
                    System.out.println("File exist");
                    return "403";
                } else {
                    FileWriter writer = new FileWriter(file);
                    String content = parsedMessage[2];
                    writer.write(content);
                    writer.close();
                }
            } catch (IOException e) {
                System.out.println("IOException in PutProcess");
                e.printStackTrace();
                return "500";
            }
            return "200";
        }

        public static String GetProcess(String[] parsedMessage) {
            String fileContent = "";
            try {
                String fileName = parsedMessage[1];
                File file = new File(filesPath + fileName);
                if (!file.exists()) {
                    System.out.println("File don't exist");
                    return "403";
                } else {
                    CharArrayWriter charArrayWriter;
                    charArrayWriter = new CharArrayWriter();
                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    String inputStr;
                    while ((inputStr = reader.readLine()) != null) {
                        charArrayWriter.write(inputStr);
                    }
                    fileContent = charArrayWriter.toString();
                    charArrayWriter.close();
                    reader.close();
                }
            } catch (IOException e) {
                System.out.println("IOException in PutProcess");
                e.printStackTrace();
                return "500";
            }
            return  "200 " + fileContent;
        }

        public static String DeleteProcess(String []parsedMessage) {
                String fileName = parsedMessage[1];
                String filePath = filesPath + fileName;
                try {
                    if (!Files.deleteIfExists(Path.of(filePath))) {
                        return "404";
                    }
                } catch (IOException e) {
                    return "500";
                }
            return  "200";
        }
    }
  learner_created: false
- name: src/server/PortListening.java
  visible: true
  text: |
    package server;

    import java.io.IOException;
    import java.net.ServerSocket;
    import server.Session;

    public class PortListening extends Thread{
        int PORT;
        PortListening(final int PORT) {
            this.PORT = PORT;
        }
        @Override
        public void run() {
            while (true) {
                try (ServerSocket server = new ServerSocket(PORT)) {
                    Session session = new Session(server.accept());
                    System.out.println("client accepted");
                    session.start();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
  learner_created: false
- name: test/Utils.java
  visible: false
  text: |+
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Arrays;
    import java.util.Objects;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Utils {
        public static String findId(String output) {
            Pattern pattern = Pattern.compile("ID = (\\d+)");
            Matcher matcher = pattern.matcher(output);

            if (matcher.find()) {
                int count = matcher.groupCount();
                if (count != 1) {
                    throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
                }
                return matcher.group(1);
            } else {
                throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
            }
        }

        public static void deleteTestFiles() {
            File dir = new File(FileServerTest.serverDataPath);

            File[] files = dir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe they are not closed!");
                        }
                    }
                }
            }

            File cdir = new File(FileServerTest.clientDataPath);
            files = cdir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe their input streams are not closed!");
                        }
                    }
                }
            }
        }

        public static void createFiles(String clientDataPath) {

            for (int i = 0; i < 2; i++) {
                try {
                    File file = new File(clientDataPath + String.format("test_purpose_test%d.txt", i + 1));
                    if (!file.exists()) file.createNewFile();
                    FileWriter writer = new FileWriter(file, false);
                    writer.write(String.format("test%d", i + 1));
                    writer.close();
                } catch (IOException e) {
                    throw new RuntimeException("Can't create test files!");
                }

            }
        }

        public static int numExistingFiles(File file) {
            File[] files = file.listFiles();
            if (files == null) {
                return 0;
            }
            return (int) Arrays.stream(files).filter(File::exists).count();
        }

        private static boolean isFileExists(String path) {
            return Files.exists(Paths.get(path)) && !Files.isDirectory(Paths.get(path));
        }

        public static boolean isClientFileExists(String fileName) {
            return isFileExists(FileServerTest.clientDataPath + fileName);
        }

        public static boolean isServerFileExists(String fileName) {
            return isFileExists(FileServerTest.serverDataPath + fileName);
        }

        public static String getServerFileContent(String fileName) {
            return getFileContent(FileServerTest.serverDataPath + fileName);
        }

        public static String getClientFileContent(String fileName) {
            return getFileContent(FileServerTest.clientDataPath + fileName);
        }

        private static String getFileContent(String fileName) {
            try {
                return new String(Files.readAllBytes(Paths.get(fileName))).trim();
            } catch (IOException e) {
            }
            throw new WrongAnswer("Can't read files content.\n" +
                "Make sure you close input/output streams after reading or writing files!");
        }

    }


  learner_created: false
- name: src/client/Get.java
  visible: true
  learner_created: true
- name: src/serialization/SerializationUtils.java
  visible: true
  learner_created: true
- name: src/client/data/sec.txt
  visible: true
  learner_created: true
- name: src/client/data/wow.txt
  visible: true
  learner_created: true
- name: src/serialization/savedFilesInfo
  visible: true
  learner_created: true
- name: src/server/data/sec.txt
  visible: true
  learner_created: true
- name: src/server/data/sec4.txt
  visible: true
  learner_created: true
- name: src/client/data/govno.txt
  visible: true
  learner_created: true
- name: src/server/data/sdfadsf.txt
  visible: true
  learner_created: true
- name: src/server/data/boba.txt
  visible: true
  learner_created: true
- name: bin/main/server/data/boba.txt
  visible: true
  learner_created: true
- name: src/server/data/boba2
  visible: true
  learner_created: true
- name: bin/main/server/data/boba2
  visible: true
  learner_created: true
- name: src/client/data/bog.txt
  visible: true
  learner_created: true
- name: bin/main/client/data/bog.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5428#comment
status: Failed
feedback:
  message: "Error in test #3\n\nInfinite loop detected.\nLast 90 lines your program\
    \ printed have 5 blocks of 18 lines of the same text.\n\nPlease find below the\
    \ output of your program during this failed test.\nNote that the &#39;&gt;&#39;\
    \ character indicates the beginning of the input line.\n\n---\n\nstdout:\nServer\
    \ started!\nException OK\nClient started!\nclient accepted\nEnter action (1 -\
    \ get a file, 2 - save a file, 3 - delete a file): &gt; 2\nEnter name of the file:\
    \ &gt; test_purpose_test1.txt\nEnter name of the file to be saved on server:&gt;\n\
    \nstderr:\njava.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:167)\n\tat server.PortListening.run(PortListening.java:31)\n\
    java.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:167)\n\tat server.PortListening.run(PortListening.java:31)\n\
    java.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:167)\n\tat server.PortListening.run(PortListening.java:31)\n\
    java.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:167)\n\tat server.PortListening.run(PortListening.java:31)\n\
    java.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:167)\n\tat server.PortListening.run(PortListening.java:31)\n\
    java.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:167)\n\tat server.PortListening.run(PortListening.java:31)\n\
    java.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:167)\n\tat server.PortListening.run(PortListening.java:31)\n\
    java.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:167)\n\tat server.PortListening.run(PortListening.java:31)\n\
    java.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:167)\n\tat server.PortListening.run(PortListening.java:31)\n\
    java.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:167)\n\tat server.PortListening.run(PortListening.java:31)\n\
    java.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:167)\nException\
    \ in thread &quot;Thread-5&quot; org.hyperskill.hstest.dynamic.security.ExitException:\
    \ Tried to exit with status 0.\n\tat org.hyperskill.hstest.dynamic.output.InfiniteLoopDetector.fail(InfiniteLoopDetector.java:155)\n\
    \tat org.hyperskill.hstest.dynamic.output.InfiniteLoopDetector.checkInfLoopLines(InfiniteLoopDetector.java:131)\n\
    \tat org.hyperskill.hstest.dynamic.output.InfiniteLoopDetector.write(InfiniteLoopDetector.java:56)\n\
    \tat org.hyperskill.hstest.dynamic.output.OutputMock.write(OutputMock.java:49)\n\
    \tat java.base/java.io.OutputStream.write(OutputStream.java:162)\n\tat java.base/java.io.PrintStream.write(PrintStream.java:568)\n\
    \tat java.base/sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:234)\n\t\
    at java.base/sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:313)\n\
    \tat java.base/sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:111)\n\t\
    at java.base/java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:178)\n\
    \tat java.base/java.io.PrintStream.writeln(PrintStream.java:723)\n\tat java.base/java.io.PrintStream.println(PrintStream.java:1051)\n\
    \tat java.base/java.lang.Throwable$WrappedPrintStream.println(Throwable.java:763)\n\
    \tat java.base/java.lang.Throwable.printStackTrace(Throwable.java:673)\n\tat java.base/java.lang.Throwable.printStackTrace(Throwable.java:659)\n\
    \tat java.base/java.lang.Throwable.printStackTrace(Throwable.java:650)\n\tat server.PortListening.run(PortListening.java:36)"
  time: Fri, 16 Sep 2022 17:36:49 UTC
record: 3
