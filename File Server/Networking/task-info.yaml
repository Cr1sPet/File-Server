type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |-
    package server;

    import javax.security.auth.login.AccountLockedException;
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.util.HashSet;
    import java.util.Set;

    public class Main {
        public static boolean validFileName(String fileName) {
            int i;
            if (fileName.length() < 5) {
                return false;
            }
            try {
                i = Integer.parseInt(fileName.substring(4));
            } catch (NumberFormatException e) {
                return  false;
            }
            if (!fileName.startsWith("file") || i < 0 || i > 10) {
                return false;
            }
            return true;
        }

        public static void addFile(String fileName, Set<String> files) {
            if (files.contains(fileName) || !validFileName(fileName) || 10 == files.size()) {
                System.out.println("Cannot add the file " + fileName);
            } else {
                files.add(fileName);
                System.out.println("The file " + fileName + " added successfully");
            }
        }
        public static void getFile(String fileName, Set<String> files) {
            if (files.contains(fileName)) {
                System.out.println("The file " + fileName + " was sent");
            } else {
                System.out.println("The file " + fileName + " not found");
            }
        }
        public static void deleteFile(String fileName, Set<String> files) {
            if (files.contains(fileName)) {
                System.out.println("The file " + fileName + " was deleted");
                files.remove(fileName);
            } else {
                System.out.println("The file " + fileName + " not found");
            }
        }
        public static void main(String[] args) throws IOException {
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            Set<String> files = new HashSet(10);
            String[] input;
            while (true) {
                input = reader.readLine().split(" ");
                if (input[0].equals("exit")) {
                    reader.close();
                    return ;
                }
                if (input.length != 2) {
                    System.out.println("Invalid input");
                    continue;
                }
                switch (input[0]) {
                    case "add" :
                        addFile(input[1], files);
                        break;
                    case "get" :
                        getFile(input[1], files);
                        break;
                    case "delete" :
                        deleteFile(input[1], files);
                        break;
                }
            }
        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class FileServerTest extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram client = new TestedProgram("client");
            TestedProgram server = new TestedProgram("server");
            server.setReturnOutputAfterExecution(true);

            server.startInBackground();

            Thread.sleep(1000);
            String serverOutput = server.getOutput().trim();

            String serverStartedMessage = "Server started!";
            if (!serverOutput.equals(serverStartedMessage)) {
                throw new WrongAnswer("Server output should be \"" + serverStartedMessage + "\" until the client connects!");
            }

            String clientOutput = client.start().trim();
            serverOutput = server.getOutput().trim();

            if (clientOutput.isEmpty()) {
                return CheckResult.wrong("Client output shouldn't be empty!");
            }

            if (serverOutput.equals(serverStartedMessage)) {
                return CheckResult.wrong("After the client connects to the server you should output the received data!");
            }

            if (!serverOutput.contains("Received: Give me everything you have!")) {
                return CheckResult.wrong("Server output should contain \"Received: Give me everything you have!\"");
            }

            if (!serverOutput.contains("Sent: All files were sent!")) {
                return CheckResult.wrong("Server output should contain \"Sent: All files were sent!\"");
            }

            if (serverOutput.indexOf("Sent: All files were sent!") < serverOutput.indexOf("Received: Give me everything you have!")) {
                return CheckResult.wrong("The server should print \"Sent: All files were sent!\" only after " +
                    "\"Received: Give me everything you have!\" was printed!");
            }

            if (!clientOutput.contains("Sent: Give me everything you have!")) {
                return CheckResult.wrong("Client output should contain \"Sent: Give me everything you have!\"");
            }

            if (!clientOutput.contains("Received: All files were sent!")) {
                return CheckResult.wrong("Client output should contain \"Received: All files were sent!\"");
            }

            if (clientOutput.indexOf("Received: All files were sent!") < clientOutput.indexOf("Sent: Give me everything you have!")) {
                return CheckResult.wrong("The client should print \"Received: All files were sent!\" only after " +
                    "\"Sent: Give me everything you have!\" was printed!");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/client/Main.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5426#comment
status: Solved
record: 1
